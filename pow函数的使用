1.首先使用pow函数必须要加头文件 :
#include<math.h>

pow() 函数用来求 x 的 y 次幂（次方），x、y及函数值实际上为double型 ，其在使用中的原型为：double pow(double x, double y); 

注意，在某些特定的情况之下，pow函数的double类型可能会引起输出结果的错误

2.pow()用来计算以x 为底的 y 次方值，然后将结果返回。设返回值为 ret
则 ret = x^y
基本使用方法如下：

#include<stdio.h>
#include<math.h>
int main()
{
    int a,b,ret;
    scanf("%d,%d", &a, &b);
    ret = pow(a,b);    //求出a的b次方
    printf("%d", ret);
    return 0;
}
3.注意可能引起报错的原因
底数 a为负数并且指数 b 不是整数，将会导致 domain error 错误.
底数 a和指数 b都是 0，会导致 domain error 错误.
底数 a是 0，指数 b 为负数，会导致 domain error 或 pole error 错误.

所以在使用pow函数时，要注意底数和指数数字的正负，不要违反基本的数学常识
4.代码实战
输入一个数，想把每位的数变成0或1。如果某一位是奇数，就把它变成1，如果是偶数，那么就把它变成0。最后得到的数是多少？
例如：输入888， 输出结果为0

            输入123，结果为101

#include<stdio.h>
#include<math.h>
int main()
{
    int a[i],  i, k;
    long long sum, n, c;
    scanf("%d", &n);
    while(n)
        {
            c = n % 10;
            n = n / 10;
            a[k++] = c;
        }
    for(i = 0; i < k; i++)
        {
            if(c % 2 == 0)
                {
                    a[i] = 0;
                }
            else
                {
                    a[i] = 1;
                }
        sum = sum + a[i] * pow(10, i);
        }
    printf("%d", sum);
    return 0;
}
